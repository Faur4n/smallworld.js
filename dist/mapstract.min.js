// thumbnail-map - A little utility for generating little maps of the world.
// @version v0.1.0
// @link https://github.com/mikefowler/map-thumbnails
// @license MIT
!function(t,i){"use strict";"function"==typeof define&&define.amd?define(["exports"],function(e){t.Mapstract=i(t,e)}):"undefined"!=typeof exports?i(t,exports):t.Mapstract=i(t)}(this,function(t){"use strict";function i(t){for(var i=1;i<arguments.length;i++){var e=arguments[i];for(var o in e)void 0===t[o]&&(t[o]=e[o])}return t}t.requestAnimFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||function(t){window.setTimeout(t,1e3/60)}}();var e={zoom:0,center:[0,0],waterColor:"#b3d1ff",landColor:"#fff",markerColor:"#333",markerSize:5},o=function(t,o){if(!t)throw new Error("A DOM element is required for Mapstract to initialize");if(!o.geojson)throw new Error("A GeoJSON source is required for Mapstract to initialize");this.el=t,this.options=i(o||{},e),this.initialize.apply(this),this.draw()};return o.prototype={initialize:function(){this.width=this.el.clientWidth,this.height=this.el.clientHeight,this.tile=new o.Tile(this.options),this.map=this.createMap(this.width,this.height),this.el.appendChild(this.map),this.draw()},createMap:function(t,i){var e=document.createElement("canvas");return e.width=t,e.height=i,e.style.position="absolute",e.style.top=0,e.style.left=0,e},getTile:function(){return new o.Tile(arguments)},resize:function(){this.map.width=this.width,this.map.height=this.height},draw:function(){var t,i,e,o,h,n=this.map.getContext("2d");for(n.fillStyle=this.options.waterColor,n.fillRect(0,0,this.width,this.height),t=Math.ceil(this.width/2-this.tile.center.x),i=Math.ceil(this.height/2-this.tile.center.y),e=Math.ceil(t/this.tile.width),o=Math.ceil((this.width-(t+this.tile.width))/this.tile.width),h=1;e>=h;h++)n.drawImage(this.tile.el,t-this.tile.width*h,i);for(h=1;o>=h;h++)n.drawImage(this.tile.el,t+this.tile.width*h,i);if(this.options.marker)this.tile.addMarker(this.options.marker===!0?this.options.center:this.options.marker);else if(this.options.markers)for(var s=0;s<this.options.markers.length;s++)this.tile.addMarker(this.options.markers[s]);n.drawImage(this.tile.el,t,i)}},o.Tile=function(t){this.options=i(t||{},e),this.initialize.apply(this)},o.Tile.prototype={initialize:function(){this.geojson=this.options.geojson.features||this.options.geojson,this.scale=Math.pow(2,parseInt(this.options.zoom)),this.width=Math.ceil(256*this.scale),this.height=Math.ceil(this.width/1.041975309),this.center=this.coordinateToPoint(this.options.center[0],this.options.center[1]),this.el=document.createElement("canvas"),this.el.width=this.width,this.el.height=this.height,this.draw()},getBounds:function(){for(var t,i,e={},o=0;o<this.geojson.length;o++){t=this.geojson[o].geometry.coordinates[0];for(var h=0;h<t.length;h++)i=this.projectCoordinate(t[h][1],t[h][0]),e.xMin=e.xMin<i.x?e.xMin:i.x,e.xMax=e.xMax>i.x?e.xMax:i.x,e.yMin=e.yMin<i.y?e.yMin:i.y,e.yMax=e.yMax>i.y?e.yMax:i.y}return e},getCenter:function(){for(var t,i,e,o=this.options.markers,h=o.length,n=0,s=0,r=0,a=0;a<o.length;a++)t=o[a][0]*Math.PI/180,i=o[a][1]*Math.PI/180,n+=Math.cos(t)*Math.cos(i),s+=Math.cos(t)*Math.sin(i),r+=Math.sin(t);return n/=h,s/=h,r/=h,i=Math.atan2(s,n),e=Math.sqrt(Math.pow(n,2)+Math.pow(s,2)),t=Math.atan2(r,e),[180*t/Math.PI,180*i/Math.PI]},draw:function(){var t=this.el.getContext("2d");t.fillStyle=this.options.landColor;for(var i=0;i<this.geojson.length;i++){for(var e=this.geojson[i].geometry.coordinates[0],o=0;o<e.length;o++){var h=this.coordinateToPoint(e[o][1],e[o][0]);0===o?(t.beginPath(),t.moveTo(h.x,h.y)):t.lineTo(h.x,h.y)}t.fill()}},coordinateToPoint:function(t,i){var e=this.getBounds(),o=this.projectCoordinate(t,i),h=this.width/Math.abs(e.xMax-e.xMin),n=this.height/Math.abs(e.yMax-e.yMin),s=n>h?h:n;return{x:(o.x-e.xMin)*s,y:(e.yMax-o.y)*s}},projectCoordinate:function(t,i){var e=o.Projection.mercator(t,i);return e.x=e.x*this.scale,e.y=e.y*this.scale,e},addMarker:function(t,i){i=i||{};var e=this.el.getContext("2d"),o=this.coordinateToPoint(t[0],t[1]);e.beginPath(),e.arc(o.x,o.y,this.options.markerSize,0,2*Math.PI,!1),e.fillStyle=this.options.markerColor,e.fill()}},o.Projection={RADIUS:6378137,MAX:85.0511287798,RADIANS:Math.PI/180,mercator:function(t,i){var e={};return e.x=this.RADIUS*i*this.RADIANS,e.y=Math.max(Math.min(this.MAX,t),-this.MAX)*this.RADIANS,e.y=this.RADIUS*Math.log(Math.tan(Math.PI/4+e.y/2)),e}},o});