// smallworld.js - A small utility for generating small world maps.
// @version v0.1.0
// @link https://github.com/mikefowler/smallworld.js
// @license MIT
!function(t,i){"use strict";"function"==typeof define&&define.amd?define(["exports"],function(e){t.Smallworld=i(t,e)}):"undefined"!=typeof exports?i(t,exports):t.Smallworld=i(t)}(this,function(){"use strict";function t(t){for(var i=1;i<arguments.length;i++){var e=arguments[i];for(var o in e)void 0===t[o]&&(t[o]=e[o])}return t}function i(t){return"[object Array]"===Object.prototype.toString.call(t)}var e={zoom:0,center:[0,0],waterColor:"#b3d1ff",landColor:"#fff",markerColor:"#333",markerSize:5},o=function(i,s){if(!i)throw new Error("A DOM element is required for Smallworld to initialize");if(this.el=i,this.options=t(s||{},e,o.defaults),!this.options.geojson)throw new Error("A GeoJSON source is required for Smallworld to initialize");this.initialize.apply(this)};return o.defaults={},o.prototype={initialize:function(){this.width=this.el.clientWidth,this.height=this.el.clientHeight,this.tile=new o.Tile(this.options),this.map=this.createMap(this.width,this.height),this.context=this.map.getContext("2d"),this.el.appendChild(this.map)},createMap:function(t,i){var e=document.createElement("canvas");return e.width=t,e.height=i,e.style.position="absolute",e.style.top=0,e.style.left=0,e},getTile:function(){return new o.Tile(arguments)},resize:function(){this.map.width=this.width,this.map.height=this.height},draw:function(){var t,e,o,s,h,n,r,a,l,c,d;for(this.context.fillStyle=this.options.waterColor,this.context.fillRect(0,0,this.width,this.height),t=Math.ceil(this.width/2-this.tile.center.x),e=Math.ceil(this.height/2-this.tile.center.y),o=Math.ceil(t/this.tile.width),s=Math.ceil((this.width-(t+this.tile.width))/this.tile.width),h=1;o>=h;h++)this.context.drawImage(this.tile.el,t-this.tile.width*h,e);for(h=1;s>=h;h++)this.context.drawImage(this.tile.el,t+this.tile.width*h,e);if(this.context.drawImage(this.tile.el,t,e),this.options.marker)r=this.options.marker===!0?this.options.center:this.options.marker,this.tile.addMarker(r);else if(this.options.markers)for(n=this.options.markers,c=0,a=n.length;a>c;c++)if(r=n[c],i(r))this.tile.addMarker(r);else if(r.points&&i(r.points))for(d=0,l=r.points.length;l>d;d++)this.tile.addMarker(r.points[d],r.options)}},o.Tile=function(i){this.options=t(i||{},e),this.initialize.apply(this)},o.Tile.prototype={initialize:function(){this.geojson=this.options.geojson.features||this.options.geojson,this.scale=Math.pow(2,parseInt(this.options.zoom)),this.bounds=this.getBounds(),this.width=Math.ceil(256*this.scale),this.height=Math.ceil(this.width/1.041975309),this.center=this.coordinateToPoint(this.options.center[0],this.options.center[1]),this.el=document.createElement("canvas"),this.el.width=this.width,this.el.height=this.height,this.context=this.el.getContext("2d"),this.draw()},getBounds:function(){for(var t,i,e={},o=0;o<this.geojson.length;o++){t=this.geojson[o].geometry.coordinates[0];for(var s=0;s<t.length;s++)i=this.projectCoordinate(t[s][1],t[s][0]),e.xMin=e.xMin<i.x?e.xMin:i.x,e.xMax=e.xMax>i.x?e.xMax:i.x,e.yMin=e.yMin<i.y?e.yMin:i.y,e.yMax=e.yMax>i.y?e.yMax:i.y}return e},draw:function(){this.context.fillStyle=this.options.landColor;for(var t=0;t<this.geojson.length;t++){for(var i=this.geojson[t].geometry.coordinates[0],e=0;e<i.length;e++){var o=this.coordinateToPoint(i[e][1],i[e][0]);0===e?(this.context.beginPath(),this.context.moveTo(o.x,o.y)):this.context.lineTo(o.x,o.y)}this.context.fill()}},coordinateToPoint:function(t,i){var e=this.projectCoordinate(t,i),o=this.width/Math.abs(this.bounds.xMax-this.bounds.xMin),s=this.height/Math.abs(this.bounds.yMax-this.bounds.yMin),h=s>o?o:s;return{x:(e.x-this.bounds.xMin)*h,y:(this.bounds.yMax-e.y)*h}},projectCoordinate:function(t,i){var e=o.Projection.mercator(t,i);return e.x=e.x*this.scale,e.y=e.y*this.scale,e},addMarker:function(t,i){console.log("addMarker",t,i),i=i||{};var e=this.coordinateToPoint(t[0],t[1]);this.context.beginPath(),this.context.arc(e.x,e.y,this.options.markerSize,0,2*Math.PI,!1),this.context.fillStyle=this.options.markerColor,this.context.fill()}},o.Projection={RADIUS:6378137,MAX:85.0511287798,RADIANS:Math.PI/180,mercator:function(t,i){var e={};return e.x=this.RADIUS*i*this.RADIANS,e.y=Math.max(Math.min(this.MAX,t),-this.MAX)*this.RADIANS,e.y=this.RADIUS*Math.log(Math.tan(Math.PI/4+e.y/2)),e}},o});